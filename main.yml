---

- hosts: node
  become: yes


  tasks:
    - name: Install Docker dependencies
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - ca-certificates
        - curl
        - gnupg
        - lsb-release
        - python3-pip

    - name: Setup official Docker repo
      block:
        - name: Add repo GPG key
          apt_key:
            url: https://download.docker.com/linux/debian/gpg
            state: present
        - name: Add Docker repository
          apt_repository:
            repo: "deb https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
            state: present

    - name: Install Docker
      apt:
        name: "{{ item }}"
        state: latest
        update_cache: yes
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-compose-plugin

    - name: Install Docker Module for Python
      pip:
        name: "{{ item }}"
      loop:
        - docker
        - docker-compose

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create Project folder
      file:
        path: projectfiles
        state: directory
        mode: '0700'

    - name: Copy project files on docker host
      copy:
        src: "{{ item }}"
        dest: projectfiles/
      with_items:
        - codimd.config
        - haproxy.config
        - postgres.config
        - haproxy
        - docker-compose.yml
        - .dockerignore

    - name: Start Docker Compose services
      docker_compose:
        project_src: projectfiles
        build: yes
        nocache: yes
        recreate: always
        state: present
      register: output

    - ansible.builtin.debug:
              var: output

    - name: Check if project folder exist
      stat:
        path: "./projectfiles"
      register: project_files
      tags: destroy

    - name: Destroy existing services
      docker_compose:
        project_src: projectfiles
        remove_images: all
        remove_volumes: yes
        state: absent
      tags: destroy
      when: project_files.stat.exists

    - name: Get details of all images
      docker_host_info:
        images: yes
        #verbose_output: yes
      register: image_info
      tags: destroy

    - name: Remove all images
      docker_image:
        name: "{{ item  }}"
        state: absent
      loop: "{{ image_info.images | map(attribute='Id') | list }}"
      tags: destroy
      ignore_errors: True

    - name: Destroy Project folder
      file:
        path: projectfiles
        state: absent
      when: project_files.stat.exists
      tags: destroy

  handlers:
    - name: Restart docker
      service: 
        name: docker
        state: restarted

